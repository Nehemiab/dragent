Index: workflows/prevention_flow.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from langgraph.graph import StateGraph\r\nfrom agents.warning import WarningAgent\r\nfrom agents.prevention import PreventionAgent\r\n\r\n\r\ndef build_prevention_flow():\r\n    builder = StateGraph(dict)\r\n\r\n    builder.add_node(\"warning\", WarningAgent().execute)\r\n    builder.add_node(\"prevention\", PreventionAgent().execute)\r\n\r\n    builder.add_edge(START, \"warning\")\r\n    builder.add_edge(\"warning\", \"prevention\")\r\n    builder.add_edge(\"prevention\", END)\r\n\r\n    return builder.compile()
===================================================================
diff --git a/workflows/prevention_flow.py b/workflows/prevention_flow.py
--- a/workflows/prevention_flow.py	(revision d7b7fd1fec4ab6ccee85a552ea90058ab41d46f6)
+++ b/workflows/prevention_flow.py	(date 1752913986861)
@@ -1,4 +1,4 @@
-from langgraph.graph import StateGraph
+from langgraph.graph import StateGraph, START, END
 from agents.warning import WarningAgent
 from agents.prevention import PreventionAgent
 
Index: agents/warning.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from kimi.client import KimiAI\r\nfrom typing import Optional\r\nimport json\r\n\r\n\r\nclass WarningAgent:\r\n    def __init__(self):\r\n        self.kimi = KimiAI()\r\n\r\n    async def execute(self, state: dict) -> dict:\r\n        prompt = f\"\"\"作为中央气象台台风首席预报员，请分析：\r\n\r\n        目标地区：{state['location']}\r\n        当前风速：{state.get('wind_speed', '未知')}\r\n        气压数据：{state.get('pressure', '未知')}\r\n\r\n        请返回JSON包含：\r\n        - warning_level: 预警等级（白/蓝/黄/橙/红）\r\n        - reasons: 分析依据\r\n        - prevention_advice: 3条防范建议\r\n        - trigger_response: 是否需启动灾后响应\"\"\"\r\n\r\n        result = await self.kimi.analyze_json(prompt)\r\n        analysis = json.loads(result)\r\n\r\n        return {\r\n            **state,\r\n            \"warning_level\": analysis[\"warning_level\"],\r\n            \"prevention_advice\": analysis[\"prevention_advice\"],\r\n            \"trigger_response\": analysis[\"trigger_response\"],\r\n            \"messages\": state[\"messages\"] + [{\r\n                \"role\": \"kimi-warning\",\r\n                \"content\": result\r\n            }]\r\n        }
===================================================================
diff --git a/agents/warning.py b/agents/warning.py
--- a/agents/warning.py	(revision d7b7fd1fec4ab6ccee85a552ea90058ab41d46f6)
+++ b/agents/warning.py	(date 1753613080622)
@@ -1,17 +1,25 @@
 from kimi.client import KimiAI
 from typing import Optional
 import json
+from langchain_openai import ChatOpenAI
+
+with open("../config.yaml", "r") as f:
+    config = yaml.safe_load(f)
+os.environ["MODEL"]= config["model"]
+os.environ["API_KEY"] = config["api_key"]
+os.environ["BASE_URL"] = config["base_url"]
+llm = ChatOpenAI(model = os.environ["MODEL"],api_key = os.environ["API_KEY"],base_url = os.environ["BASE_URL"],stream_usage=True)
 
 
 class WarningAgent:
     def __init__(self):
         self.kimi = KimiAI()
 
-    async def execute(self, state: dict) -> dict:
+    async def execute(self, state: dict  ) -> dict:
         prompt = f"""作为中央气象台台风首席预报员，请分析：
 
         目标地区：{state['location']}
-        当前风速：{state.get('wind_speed', '未知')}
+        当前风速：{stat 你你就就就就e.get('wind_speed', '未知')}
         气压数据：{state.get('pressure', '未知')}
 
         请返回JSON包含：
Index: workflows/response_flow.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from agents import ReportingAgent, ResourceAgent, AssessmentAgent, ReconstructionAgent\r\n\r\n\r\ndef build_response_flow():\r\n    builder = StateGraph(dict)\r\n\r\n    agents = {\r\n        \"reporting\": ReportingAgent().execute,\r\n        \"resource\": ResourceAgent().execute,\r\n        \"assessment\": AssessmentAgent().execute,\r\n        \"reconstruction\": ReconstructionAgent().execute\r\n    }\r\n\r\n    for name, node in agents.items():\r\n        builder.add_node(name, node)\r\n\r\n    builder.add_edge(START, \"reporting\")\r\n    builder.add_edge(\"reporting\", \"resource\")\r\n    builder.add_edge(\"reporting\", \"assessment\")\r\n    builder.add_edge(\"reporting\", \"reconstruction\")\r\n\r\n    builder.add_edge(\"resource\", END)\r\n    builder.add_edge(\"assessment\", END)\r\n    builder.add_edge(\"reconstruction\", END)\r\n\r\n    return builder.compile()
===================================================================
diff --git a/workflows/response_flow.py b/workflows/response_flow.py
--- a/workflows/response_flow.py	(revision d7b7fd1fec4ab6ccee85a552ea90058ab41d46f6)
+++ b/workflows/response_flow.py	(date 1752913986864)
@@ -1,5 +1,8 @@
-from agents import ReportingAgent, ResourceAgent, AssessmentAgent, ReconstructionAgent
-
+from langgraph.graph import StateGraph, START, END
+from agents.reporting import ReportingAgent
+from agents.resource import ResourceAgent
+from agents.assessment import AssessmentAgent
+from agents.reconstruction import ReconstructionAgent
 
 def build_response_flow():
     builder = StateGraph(dict)
Index: agents/assessment.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from kimi.client import KimiAI\r\nimport json\r\nfrom typing import Dict, Any\r\n\r\n\r\nclass AssessmentAgent:\r\n    def __init__(self):\r\n        self.kimi = KimiAI()\r\n\r\n    async def execute(self, state: Dict[str, Any]) -> Dict[str, Any]:\r\n        prompt = f\"\"\"作为住建部灾害评估专家，请分析以下房屋损毁情况：\r\n\r\n        **输入数据**：\r\n        - 受灾地区：{state['location']}\r\n        - 台风等级：{state.get('warning_level', '未知')}\r\n        - 灾情报告：{json.dumps(state['damage_report'], indent=2, ensure_ascii=False)}\r\n        - 建筑数据库：{state.get('building_db', '暂无')}\r\n\r\n        **请返回JSON**：\r\n        {{\r\n            \"damage_level\": \"轻度/中度/严重\",\r\n            \"dangerous_buildings\": {{\r\n                \"count\": int,\r\n                \"locations\": [list]\r\n            }},\r\n            \"safety_assessment\": {{\r\n                \"immediate_risks\": [list],\r\n                \"long_term_risks\": [list]\r\n            }},\r\n            \"inspection_priority\": [list]\r\n        }}\"\"\"\r\n\r\n        try:\r\n            analysis = await self.kimi.analyze_json(prompt)\r\n            assessment = json.loads(analysis)\r\n\r\n            return {\r\n                **state,\r\n                \"building_assessment\": assessment,\r\n                \"messages\": state[\"messages\"] + [{\r\n                    \"role\": \"kimi-assessment\",\r\n                    \"content\": analysis\r\n                }]\r\n            }\r\n        except Exception as e:\r\n            return {\r\n                **state,\r\n                \"error\": f\"房屋评估失败: {str(e)}\",\r\n                \"messages\": state[\"messages\"] + [{\r\n                    \"role\": \"error\",\r\n                    \"content\": f\"评估错误: {str(e)}\"\r\n                }]\r\n            }
===================================================================
diff --git a/agents/assessment.py b/agents/assessment.py
--- a/agents/assessment.py	(revision d7b7fd1fec4ab6ccee85a552ea90058ab41d46f6)
+++ b/agents/assessment.py	(date 1752913595558)
@@ -11,6 +11,10 @@
         prompt = f"""作为住建部灾害评估专家，请分析以下房屋损毁情况：
 
         **输入数据**：
+            }},
+            "safety_assessment": {{
+                "immediate_risks": [list],
+                "long_term
         - 受灾地区：{state['location']}
         - 台风等级：{state.get('warning_level', '未知')}
         - 灾情报告：{json.dumps(state['damage_report'], indent=2, ensure_ascii=False)}
@@ -21,11 +25,7 @@
             "damage_level": "轻度/中度/严重",
             "dangerous_buildings": {{
                 "count": int,
-                "locations": [list]
-            }},
-            "safety_assessment": {{
-                "immediate_risks": [list],
-                "long_term_risks": [list]
+                "locations": [list]_risks": [list]
             }},
             "inspection_priority": [list]
         }}"""
